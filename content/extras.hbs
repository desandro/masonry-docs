---
title: Extras
---

{{! --------------------------------------------------- }}

<h2>Extra examples</h2>

<ul>
  <li><a href="http://codepen.io/desandro/pen/kwsJb">Iteratively reveal items after each image is loaded</a>. See <a href="https://github.com/desandro/masonry/issues/501#issuecomment-34583942">explanation on issue #501</a></li>
  <li><a href="http://codepen.io/desandro/pen/bqvLaZ/">Transition items up (instead of scale) with hiddenStyle and visibleStyle</a></li>
  <li><a href="http://codepen.io/desandro/pen/btHyq">Drag and drop in and out of Masonry</a> (sort of)</li>
</ul>

{{! --------------------------------------------------- }}

<h2>RequireJS</h2>

<p>Masonry supports <a href="http://requirejs.org">RequireJS</a>.</p>

<p>You can require <a href="{{sourceUrlPath}}masonry.pkgd.js">masonry.pkgd.js</a>.</p>

``` js
requirejs( [
  'path/to/masonry.pkgd.js',
], function( Masonry ) {
  new Masonry( '.grid', {...});
});
```

<p id="requirejs-pkgd-jquery">To use Masonry as a jQuery plugin with RequireJS and masonry.pkgd.js, you need to use jQuery Bridget.</p>


``` js
// require the require function
requirejs( [ 'require', 'jquery', 'path/to/masonry.pkgd.js' ],
  function( require, $, Masonry ) {
    // require jquery-bridget, it's included in masonry.pkgd.js
    require( [ 'jquery-bridget/jquery.bridget' ],
    function( jQueryBridget ) {
      // make Masonry a jQuery plugin
      jQueryBridget( 'masonry', Masonry, $ );
      // now you can use $().masonry()
      $('.grid').masonry({...});
    }
  );
});
```

<p id="requirejs-bower">Or, you can manage dependencies with <a href="http://bower.io">Bower</a>. Set <a href="http://requirejs.org/docs/api.html#config-baseUrl">baseUrl</a> to <code>bower_components</code> and set a path config for all your application code.</p>

``` js
requirejs.config({
  baseUrl: 'bower_components/',
  paths: {
    app: '../'
  }
});

requirejs( [
  'masonry/masonry',
  'app/my-component.js'
], function( Masonry, myComp ) {
  new Masonry( '.grid', {...});
});
```

<p id="requirejs-bower-jquery">You can require Bower dependencies and use Masonry as a jQuery plugin with jQuery Bridget.</p>

``` js
requirejs.config({
  baseUrl: '../bower_components',
  paths: {
    jquery: 'jquery/jquery'
  }
});

requirejs( [
    'jquery',
    'masonry/masonry',
    'jquery-bridget/jquery-bridget'
  ],
  function( $, Masonry, jQueryBridget ) {
    // make Masonry a jQuery plugin
    jQueryBridget( 'masonry', Masonry, $ );
    // now you can use $().masonry()
    $('.grid').masonry({...});
});
```

{{! --------------------------------------------------- }}

<h2>Browserify</h2>

<p>Masonry works with <a href="http://browserify.org">Browserify</a>. <a href="https://www.npmjs.org/package/masonry-layout">Install Masonry with npm</a>.</p>

```
npm install masonry-layout
```

``` js
var Masonry = require('masonry-layout');

var msnry = new Masonry( '.grid', {
  // options...
});
```

<p id="browserify-jquery">To use Masonry as a jQuery plugin with Browserify, you need to use <a href="https://www.npmjs.org/package/jquery-bridget">jQuery Bridget</a></p>

```
npm install jquery
npm install jquery-bridget
```

``` js
var $ = require('jquery');
var jQueryBridget = require('jquery-bridget');
var Masonry = require('masonry-layout');
// make Masonry a jQuery plugin
jQueryBridget( 'masonry', Masonry, $ );
// now you can use $().masonry()
$('.grid').masonry({
  columnWidth: 80
});
```

{{! ----------------------------------------------------------------- }}

<h2>Webpack</h2>

<p>Install Masonry with npm.</p>

``` bash
npm install masonry-layout
```

<p>You can then <code>require(<span class="string">'masonry-layout'</span>)</code>.</p>

``` js
// main.js
var Masonry = require('masonry-layout');

var msnry = new Masonry( '.grid', {
  // options...
});
```

<p>Run webpack.</p>


``` bash
webpack main.js bundle.js
```

<p>jQuery plugin functionality needs to be installed separately, similar to <a href="#browserify">using Browserify</a>.</p>

``` bash
npm install jquery-bridget
```

``` js
var $ = require('jquery');
var jQueryBridget = require('jquery-bridget');
var Masonry = require('masonry-layout');
// make Masonry a jQuery plugin
jQueryBridget( 'masonry', Masonry, $ );
// now you can use $().masonry()
$('.grid').masonry({
  columnWidth: 80
});
```

{{! --------------------------------------------------- }}

<h2>Bootstrap</h2>

<p>You can use Masonry layouts with <a href="http://getbootstrap.com/css/#grid">Bootstrap grid system</a>. This example will display a fluid grid of 3 columns, using <code>col-xs-4</code> as <code>columnWidth</code>.</p>

<div class="example">
  <div class="example__code">
    ``` html
    <div class="container-fluid">
      <!-- add extra container element for Masonry -->
      <div class="grid">
        <!-- add sizing element for columnWidth -->
        <div class="grid-sizer col-xs-4"></div>
        <!-- items use Bootstrap .col- classes -->
        <div class="grid-item col-xs-8">
          <!-- wrap item content in its own element -->
          <div class="grid-item-content">...</div>
        </div>
        <div class="grid-item col-xs-4">
          <div class="grid-item-content">...</div>
        </div>
        ...
      </div>
    </div>
    ```

    ``` js
    $('.grid').masonry({
      itemSelector: '.grid-item', // use a separate class for itemSelector, other than .col-
      columnWidth: '.grid-sizer',
      percentPosition: true
    });
    ```
  </div>
  {{> bootstrap-3-demo}}
</div>

<p>Use multiple <code>.col-</code> classes on item elements to use Bootstrap&rsquo;s grid media queries to responsively change column sizes. This example will use 2, then 3, then 4 columns at different screen sizes.</p>

<div class="example">
  <div class="example__code">
    ``` html
    <div class="container-fluid">
      <div class="grid">
        <!-- 2 col grid @ xs, 3 col grid @ sm, 4 col grid @ md -->
        <div class="grid-sizer col-xs-6 col-sm-4 col-md-3"></div>
        <!-- 1 col @ xs, 2 col @ sm, 2 col @ md -->
        <div class="grid-item col-xs-6 col-sm-8 col-md-6">
          <div class="grid-item-content">...</div>
        </div>
        <!-- 1 col @ xs, 1 col @ sm, 1 col @ md -->
        <div class="grid-item col-xs-6 col-sm-4 col-md-3">
          <div class="grid-item-content">...</div>
        </div>
        ...
      </div>
    </div>
    ```
  </div>
  {{> bootstrap-3-mq-demo}}
</div>

{{! ----------------------------------------------------------------- }}

<h2>Animating item size</h2>

<p>You cannot transition or animate the size of an item element <em>and</em> properly lay out. But there is a trick &mdash; you can animate a child element of the item element.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` html
    <div class="grid">
      <!-- items have grid-item-content child elements -->
      <div class="grid-item">
        <div class="grid-item-content"></div>
      </div>
      ...
    ```

    ``` css
    /* item is invisible, but used for layout
    item-content is visible, and transitions size */
    .grid-item,
    .grid-item-content {
      width: 60px;
      height: 60px;
    }
    .grid-item-content {
      background: #09D;
      transition: width 0.4s, height 0.4s;
    }

    /* both item and item content change size */
    .grid-item.is-expanded,
    .grid-item.is-expanded .grid-item-content {
      width: 180px;
      height: 120px;
    }
    ```
  </div>
  {{> animate-item-size}}
</div>

<p>This technique works on items with responsive, percentage widths. Although, it does require a bit more JS. <a href="http://codepen.io/desandro/pen/jGJKL">Check out the example on CodePen</a> to see how it&rsquo;s done.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` css
    .grid-item {
      width: 20%;
      height: 60px;
    }

    .grid-item-content {
      width:  100%;
      height: 100%;
      background: #09D;
      transition: width 0.4s, height 0.4s;
    }
    /* item has expanded size */
    .grid-item.is-expanded {
      width: 60%;
      height: 120px;
    }
    ```
  </div>
  {{> animate-item-size-responsive}}

</div>

{{! --------------------------------------------------- }}

<h2>Web fonts</h2>

<p>Like images, unloaded web fonts can throw off Masonry. To resolve this, trigger <a href="methods.html#layout"><code>layout</code></a> after fonts have been loaded. Both Typekit and Google WebFont Loader provide font events to control scripts based on how fonts are loaded.</p>

<ul>
  <li><a href="http://blog.typekit.com/2010/10/18/more-control-with-typekits-font-events/">Typekit font events</a></li>
  <li><a href="https://developers.google.com/webfonts/docs/webfont_loader#Events">Google WebFont Loader: Events</a></li>
</ul>

<h3>Typekit</h3>

<p>Try the script below when using Masonry on a page with Typekit. This will trigger Masonry when the document is ready and again when fonts have loaded. Be sure to remove Typekitâ€™s default script, <code>try{Typekit.load();}catch(e){}</code>.</p>

``` js
var msnry;

function triggerMasonry() {
  // don't proceed if masonry has not been initialized
  if ( !msnry ) {
    return;
  }
  msnry.layout();
}
// initialize masonry on document ready
docReady( function() {
  var container = document.querySelector('.grid');
  msnry = new Masonry( container, {
    // options...
  });
});
// trigger masonry when fonts have loaded
Typekit.load({
  active: triggerMasonry,
  inactive: triggerMasonry
});
```

``` js
// or with jQuery
var $grid;

function triggerMasonry() {
  // don't proceed if $grid has not been selected
  if ( !$grid ) {
    return;
  }
  // init Masonry
  $grid.masonry({
    // options...
  });
}
// trigger masonry on document ready
$(function(){
  $grid = $('.grid');
  triggerMasonry();
});
// trigger masonry when fonts have loaded
Typekit.load({
  active: triggerMasonry,
  inactive: triggerMasonry
});
```

{{! ----------------------------------------------------------------- }}

<h2>Issues</h2>

<h3>Reduced test cases</h3>

<p>Creating a reduced test case is the best way to debug problems and report issues. Read <a href="http://css-tricks.com/reduced-test-cases/">CSS Tricks</a> on why they&rsquo;re so great.</p>

<p>Create a reduced test case for Masonry by forking any one of the <a href="http://codepen.io/desandro/tag/masonry-docs">CodePen demos</a> from these docs.</p>

<ul>
  <li>A reduced test case clearly demonstrates the bug or issue.</li>
  <li>It contains the bare minimum HTML, CSS, and JavaScript required to demonstrate the bug.</li>
  <li>A link to your production site is <b>not</b> a reduced test case.</li>
</ul>

<p>Creating a reduced test case is the best way to get your issue addressed. They help you point out the problem. They help us debug the problem. They help others understand the problem.</p>

{{! ----------------------------------------------------------------- }}

<h3>Submitting issues</h3>

<p>Report <a href="https://github.com/desandro/masonry/issues/">issues on GitHub</a>. Make sure to include a <strong>reduced test case</strong>. Without a reduced test case, your issue may be closed.</p>

{{! --------------------------------------------------- }}

<h2>Browser support</h2>

<p>Masonry v4 supports IE10+, Android 4+, Safari for iOS 5+, Firefox 16+, and Chrome 12+.</p>

<p>For IE8+ and Android 2.3 support, try <a href="http://masonry.desandro.com/v3">Masonry v3</a>.</p>

{{! --------------------------------------------------- }}

<h2>Upgrading from v3</h2>

<p>Masonry v4 dropped browser support for IE8, IE9, and Android 2.3. All options, methods, and code for Masonry v3 is backwards compatibile with Masonry v4.</p>

<ul>
  <li><code>isOptionName</code> options renamed to <code>optionName</code>. Masonry v4 is backwards compatible with the old <code>isOptionName</code> options.
    <ul>
      <li><a href="options.html#fitwidth"><code>isFitWidth</code> &rarr; <code>fitWidth</code></a></li>
      <li><a href="options.html#originleft"><code>isOriginLeft</code> &rarr; <code>originLeft</code></a></li>
      <li><a href="options.html#origintop"><code>isOriginTop</code> &rarr; <code>originTop</code></a></li>
      <li><a href="options.html#resize"><code>isResizeBound</code> &rarr; <code>resize</code></a></li>
      <li><a href="options.html#initlayout"><code>isInitLayout</code> &rarr; <code>initLayout</code></a></li>
    </ul>
  </li>
  <li><a href=".#initialize-in-html">HTML initialization</a> can be done with <code>data-masonry</code>.  Masonry v4 is backwards compatible with previous code: <code>js-masonry</code> class and <code>data-masonry-options</code>  attribute.</li>
  <li>IE8 helper dependencies removed: eventie, get-style-property, doc-ready</li>
  <li><code>jquery-bridget/jquery.bridget</code> path renamed to <code>jquery-bridget/jquery-bridget</code></li>
</ul>

{{! --------------------------------------------------- }}

<h2>Additional resources</h2>

<ul>
  <li><a href="http://codepen.io/desandro/tag/masonry/">Masonry CodePens</a></li>
  <li>The <a href="http://metafizzy.co/blog/">Metafizzy blog</a> has posts that cover specialized use cases</li>
  <li><a href="http://stackoverflow.com/users/182183/desandro?tab=answers">My answers on Stack Overflow</a></li>
  <li><a href="http://www.delicious.com/desandro/jquerymasonry">Sites using Masonry on Delicious</a></li>
  <li><a href="http://stackoverflow.com/search?q=masonry">Stack Overflow questions about Masonry</a></li>
  <li><a href="http://www.delicious.com/desandro/re:masonry">Related Masonry links</a></li>
  <li>Other resources that are <a href="http://www.delicious.com/desandro/likemasonrybutnot">like Masonry but not</a></li>
</ul>

{{! --------------------------------------------------- }}
